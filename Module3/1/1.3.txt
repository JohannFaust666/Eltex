#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    // Проверка количества аргументов
    if (argc < 2) {
        fprintf(stderr, "Usage: %s side1 [side2 ...]\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Создание дочернего процесса
    pid_t pid = fork();

    if (pid == -1) {
        perror("fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Код дочернего процесса
        int num_sides = argc - 1;
        int num_squares = num_sides / 2;
        int total_area = 0;
        // Рассчитываем площади квадратов второй половины списка аргументов
        for (int i = 0; i < num_squares; i++) {
            int side = atoi(argv[i]);
            int area = side * side;
            total_area += area;
        }
        // Выводим результат вычислений в дочернем процессе
        printf("Child process: Total area is %d\n", total_area);
        // Завершаем дочерний процесс
        exit(EXIT_SUCCESS);
    } else {
        // Код родительского процесса
        int num_sides = argc - 1;
        int num_squares = num_sides / 2;
        int total_area = 0;
        // Рассчитываем площади квадратов первой половины списка аргументов
        for (int i = num_squares; i < num_sides; i++) {
            int side = atoi(argv[i]);
            int area = side * side;
            total_area += area;
        }
        // Выводим результат вычислений в родительском процессе
        printf("Parent process: Total area is %d\n", total_area);
        // Ожидаем завершения дочернего процесса
        int status;
        waitpid(pid, &status, 0);
        // Выводим информацию о завершении дочернего процесса
        printf("Child process has exited with status %d\n", status);
    }

    return 0;
}